@use 'sass:map';
@import '~bootstrap/scss/bootstrap-utilities';

// default in Bootstrap 5.2
$table-striped-columns-order: even;
// $task-list-check-input-checked-disabled-bg-color: $secondary;
// $task-list-check-input-checked-disabled-border-color: $task-list-check-input-checked-disabled-bg-color;
$task-list-check-input-disabled-opacity: $btn-disabled-opacity;
$task-list-check-label-disabled-opacity: $task-list-check-input-disabled-opacity;

.formattedText {

  :global(.note) {
    font-size: $font-size-sm;
    background-color: $light;
    padding: map.get($spacers, 3);
    margin-bottom: map.get($spacers, 3);

    > *:last-child,
    > *:last-child > *:last-child,
    > *:last-child > *:last-child > *:last-child,
    > *:last-child > *:last-child > *:last-child > *:last-child,
    > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child {
      margin-bottom: 0 !important;
    }
    // Possibly replace with:
    // &::after {
    //   content: '';
    //   height: 0;
    //   width: 100%;
    //   display: block;
    //   margin-top: - map.get($spacers, 3);
    // }
  }

  > *:last-child,
  > *:last-child > *:last-child,
  > *:last-child > *:last-child > *:last-child,
  > *:last-child > *:last-child > *:last-child > *:last-child,
  > *:last-child > *:last-child > *:last-child > *:last-child > *:last-child
  {
    margin-bottom: 0 !important;
  }
  // Possibly replace with:
  // &::after {
  //   content: '';
  //   height: 0;
  //   width: 100%;
  //   display: block;
  //   margin-top: - map.get($spacers, 3);
  // }

  /* Shamelessly copied from Bootstrap */
  :global(.table) {
    > table {
      --#{$variable-prefix}table-bg: #{$table-bg};
      --#{$variable-prefix}table-accent-bg: #{$table-accent-bg};
      --#{$variable-prefix}table-striped-color: #{$table-striped-color};
      --#{$variable-prefix}table-striped-bg: #{$table-striped-bg};
      --#{$variable-prefix}table-active-color: #{$table-active-color};
      --#{$variable-prefix}table-active-bg: #{$table-active-bg};
      --#{$variable-prefix}table-hover-color: #{$table-hover-color};
      --#{$variable-prefix}table-hover-bg: #{$table-hover-bg};
    
      width: 100%;
      margin-bottom: $spacer;
      color: $table-color;
      vertical-align: $table-cell-vertical-align;
      border-color: $table-border-color;

      > :not(caption) > * > * {
        padding: $table-cell-padding-y $table-cell-padding-x;
        background-color: var(--#{$variable-prefix}table-bg);
        border-bottom-width: $table-border-width;
        box-shadow: inset 0 0 0 9999px var(--#{$variable-prefix}table-accent-bg);
      }
    
      > tbody {
        vertical-align: inherit;
      }
    
      > thead {
        vertical-align: bottom;
      }
    
      // Highlight border color between thead, tbody and tfoot.
      > :not(:first-child) {
        border-top: calc(2 * $table-border-width) solid $table-group-separator-color;
      }
    }
  }

  :global(.table-intended-meaning),
  :global(.table-truth),
  :global(.table-sm) {
    > table {
      > :not(caption) > * > * {
        padding: $table-cell-padding-y-sm $table-cell-padding-x-sm;
      }
    }
  }

  :global(.table-bordered) {
    > table {
      > :not(caption) > * {
        border-width: $table-border-width 0;
    
        // stylelint-disable-next-line selector-max-universal
        > * {
          border-width: 0 $table-border-width;
        }
      }
    }
  }

  :global(.table-borderless) {
    > table {
      // stylelint-disable-next-line selector-max-universal
      > :not(caption) > * > * {
        border-bottom-width: 0;
      }
    
      > :not(:first-child) {
        border-top-width: 0;
      }
    }
  }

  :global(.table-striped) {
    > table {
      > tbody > tr:nth-of-type(#{$table-striped-order}) > * {
        --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-striped-bg);
        color: var(--#{$variable-prefix}table-striped-color);
      }
    }
  }

  :global(.table-truth),
  :global(.table-striped-columns) {
    > table {
      > :not(caption) > tr > :nth-child(#{$table-striped-columns-order}) {
        --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-striped-bg);
        color: var(--#{$variable-prefix}table-striped-color);
      }
    }
  }

  :global(.table-intended-meaning),
  :global(.table-truth),
  :global(.table-w-auto) {
    > table {
      width: auto;
    }
  }

  :global(.table-m-auto) {
    > table {
      margin: auto !important;
    }
  }

  :global(.table-truth) {
    font-size: $font-size-sm;
    overflow-x: auto;

    &:global(.table) > table {
      // overflow-x causes the table's margin not to collapse
      // with the parent's margin
      margin-bottom: 0;
    }

    > table {
      > :not(caption) > * > th {
        white-space: nowrap;
      }
    }
  }

  dt {
    break-after: avoid;
  }

  dd {
    break-before: avoid;
  }

  :global(.dl-inset) > dl,
  dl:global(.dl-inset) {
    > dt:has(+ dd),
    > div > dt:has(+ dd) {
      float: left;
      margin-right: 1rem;
    }

    > dd::after,
    > div > dd::after {
      content: " ";
      display: block;
      height: 0;
      clear: left;
    }
  }

  :global(.dl-indented) > dl,
  dl:global(.dl-indented) {
    > dd,
    > div > dd {
      margin-left: 2rem;
    }
  }

  :global(.contains-task-list) {
    list-style: none;
  }

  /* Shamelessly copied from Bootstrap */
  :global(.task-list-item) {
    position: relative;

    > input[type="checkbox"]:first-child {
      float: left;
      margin-left: $form-check-padding-start * -1;
      width: $form-check-input-width;
      height: $form-check-input-width;
      margin-top: ($line-height-base - $form-check-input-width) * .5; // line-height minus check height
      vertical-align: top;
      background-color: $form-check-input-bg;
      background-repeat: no-repeat;
      background-position: center;
      background-size: contain;
      border: $form-check-input-border;
      appearance: none;
      color-adjust: exact; // Keep themed appearance for print
      @include transition($form-check-transition);

      @include border-radius($form-check-input-border-radius);

      &:active {
        filter: $form-check-input-active-filter;
      }

      &:focus {
        border-color: $form-check-input-focus-border;
        outline: 0;
        box-shadow: $form-check-input-focus-box-shadow;
      }

      &:checked {
        background-color: $form-check-input-checked-bg-color;
        border-color: $form-check-input-checked-border-color;

        @if $enable-gradients {
          background-image: escape-svg($form-check-input-checked-bg-image), var(--#{$variable-prefix}gradient);
        } @else {
          background-image: escape-svg($form-check-input-checked-bg-image);
        }
      }

      &:disabled {
        pointer-events: none;
        filter: none;
        opacity: $task-list-check-input-disabled-opacity;

        // &:checked {
        //   background-color: $task-list-check-input-checked-disabled-bg-color;
        //   border-color: $task-list-check-input-checked-disabled-border-color;
        // }
      }

      // Use disabled attribute in addition of :disabled pseudo-class
      // See: https://github.com/twbs/bootstrap/issues/28247
      &[disabled],
      &:disabled {
        ~ .form-check-label {
          opacity: $task-list-check-label-disabled-opacity;
        }
      }
    }
  }

  :global(.columns) {
    --#{$variable-prefix}column-gap: #{$grid-gutter-width};

    column-gap: var(--#{$variable-prefix}column-gap);
    margin-bottom: $spacer;
  }

  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      @each $count in (1,2,3,4,5,6) {
        :global(.columns#{$infix}-#{$count}) {
          column-count: $count;
        }
      }

      @each $key, $value in $gutters {
        :global(.columns-gap#{$infix}-#{$key}) {
          --#{$variable-prefix}column-gap: #{$value};
        }
      }
    }
  }
}
